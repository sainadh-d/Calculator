{"version":3,"sources":["calculator/utils.cljs"],"mappings":";AAKA,AAAA,AAAMA,AAAUC;AAAhB,AACE,AAAMC,AAAkBD,AACA,AAAA,AAAA,AAACE,AACD,AAAA,AAAA,AAACA;AAFzB,AAGE,AAAA,AACE,AAAK,AAACE,AAAQH;AADhB,AAAA,AAAAE,AAESE;AAFT,AAAAF,AAEkBG;AAFlB,AAAA;;AAAA,AAAA,AAAAH;;;;AAKJ,AAAA,AAAMI,AAAWC;AAAjB,AAAA;AAGE,AAAI,AAAA,AAACC,AAAE,AAACC,AAAMF;AACZG;;AACA,AAAA,AAACC,AAAKJ,AAAQ,AAAA,AAAK,AAACE,AAAMF;;;AAE9B,AAAA,AAAMK,AAAQC;AAAd,AACE,AAACC,AAAUC,AAAKF","names":["calculator.utils/evaluate","expression","sanitized-exp","clojure.string/replace","e27777","js/eval","js/Error","e","calculator.utils/backspace","value","cljs.core._EQ_","cljs.core/count","calculator.state/default-display-value","cljs.core.subs","calculator.utils/is-num","x","cljs.core/contains?","calculator.state/nums"],"sourcesContent":["(ns calculator.utils\n  (:require [clojure.string :as string]\n            [calculator.state :refer [default-display-value nums]]))\n\n\n(defn evaluate [expression]\n  (let [sanitized-exp (-> expression\n                          (string/replace \"x\" \"*\")\n                          (string/replace \"\u00f7\" \"/\"))]\n    (try\n      (str (js/eval sanitized-exp))\n      (catch js/Error e\n        \"Error\"))))\n\n(defn backspace [value]\n  \"Emulates backspace i.e, changes xxx -> xx.\n  If there is only one digit, then returns default-display-value ie. x -> 0\"\n  (if (= (count value) 1)\n    default-display-value\n    (subs value 0 (dec (count value)))))\n\n(defn is-num [x]\n  (contains? nums x))\n"]}